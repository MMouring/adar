AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions
Description: Optimized Python Lambda Layers StackSet

Resources:
  BingAdsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.13
      Content:
        S3Bucket: !Sub 'hotel-planner-deploy-${AWS::AccountId}-${AWS::Region}'
        S3Key: bing-ads-layer.zip
      Description: "Lambda layer containing the python library for Bing Ads."
      LayerName: !Sub '${AWS::StackName}-bing-ads-layer'
      LicenseInfo: MIT

  GoogleAdsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.13
      Content:
        S3Bucket: !Sub 'hotel-planner-deploy-${AWS::AccountId}-${AWS::Region}'
        S3Key: google-ads-layer.zip
      Description: "Lambda layer containing the python library for Google Ads."
      LayerName: !Sub '${AWS::StackName}-google-ads-layer'
      LicenseInfo: MIT

Outputs:
  GoogleAdsLayerArn:
    Description: ARN for the Google Ads Lambda Layer
    Value: !Ref GoogleAdsLayer

  BingAdsLayerArn:
    Description: ARN for the Bing Ads Lambda Layer
    Value: !Ref BingAdsLayer
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Stack set template for Python Lambda service with standard configurations'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for the stack
  
  LambdaRuntime:
    Type: String
    Default: python3.11
    Description: Python runtime version for Lambda

  LambdaTimeout:
    Type: Number
    Default: 30
    Description: Lambda function timeout in seconds

  LambdaMemorySize:
    Type: Number
    Default: 128
    Description: Lambda function memory size in MB

Resources:
  # IAM Role for Lambda execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello from Lambda!'
              }
      Runtime: !Ref LambdaRuntime
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunction}
      RetentionInDays: 14

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-function-arn

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub ${AWS::StackName}-function-name

  LambdaRoleArn:
    Description: ARN of the Lambda IAM Role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-role-arn
